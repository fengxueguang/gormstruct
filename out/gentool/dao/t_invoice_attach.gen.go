// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/leeprince/gormstruct/out/gentool/model"
)

func newTInvoiceAttach(db *gorm.DB, opts ...gen.DOOption) tInvoiceAttach {
	_tInvoiceAttach := tInvoiceAttach{}

	_tInvoiceAttach.tInvoiceAttachDo.UseDB(db, opts...)
	_tInvoiceAttach.tInvoiceAttachDo.UseModel(&model.TInvoiceAttach{})

	tableName := _tInvoiceAttach.tInvoiceAttachDo.TableName()
	_tInvoiceAttach.ALL = field.NewAsterisk(tableName)
	_tInvoiceAttach.ID = field.NewInt64(tableName, "id")
	_tInvoiceAttach.InvoiceID = field.NewString(tableName, "invoice_id")
	_tInvoiceAttach.OrderSn = field.NewString(tableName, "order_sn")
	_tInvoiceAttach.AttachmentURL = field.NewString(tableName, "attachment_url")
	_tInvoiceAttach.OcrModify = field.NewString(tableName, "ocr_modify")
	_tInvoiceAttach.CustomTaxRate = field.NewFloat64(tableName, "custom_tax_rate")
	_tInvoiceAttach.CertStatus = field.NewInt32(tableName, "cert_status")
	_tInvoiceAttach.PdfURL = field.NewString(tableName, "pdf_url")
	_tInvoiceAttach.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tInvoiceAttach.CreatedAt = field.NewTime(tableName, "created_at")
	_tInvoiceAttach.ExternalOrderID = field.NewString(tableName, "external_order_id")
	_tInvoiceAttach.ExternalTicketType = field.NewString(tableName, "external_ticket_type")

	_tInvoiceAttach.fillFieldMap()

	return _tInvoiceAttach
}

type tInvoiceAttach struct {
	tInvoiceAttachDo tInvoiceAttachDo

	ALL                field.Asterisk
	ID                 field.Int64
	InvoiceID          field.String  // 发票id
	OrderSn            field.String  // 订单id
	AttachmentURL      field.String  // 附件链接,JSON["a","b"]
	OcrModify          field.String  // OCR修改记录,JSON
	CustomTaxRate      field.Float64 // 税率默认值-1
	CertStatus         field.Int32   // 凭证入账状态
	PdfURL             field.String  // ofd转pdf的url
	UpdatedAt          field.Time    // 更新时间
	CreatedAt          field.Time    // 创建时间
	ExternalOrderID    field.String  // 外部订单号（多个订单用逗号隔开）
	ExternalTicketType field.String  // 外部票据类型（taxi, flight, hotel, train）

	fieldMap map[string]field.Expr
}

func (t tInvoiceAttach) Table(newTableName string) *tInvoiceAttach {
	t.tInvoiceAttachDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tInvoiceAttach) As(alias string) *tInvoiceAttach {
	t.tInvoiceAttachDo.DO = *(t.tInvoiceAttachDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tInvoiceAttach) updateTableName(table string) *tInvoiceAttach {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.InvoiceID = field.NewString(table, "invoice_id")
	t.OrderSn = field.NewString(table, "order_sn")
	t.AttachmentURL = field.NewString(table, "attachment_url")
	t.OcrModify = field.NewString(table, "ocr_modify")
	t.CustomTaxRate = field.NewFloat64(table, "custom_tax_rate")
	t.CertStatus = field.NewInt32(table, "cert_status")
	t.PdfURL = field.NewString(table, "pdf_url")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.ExternalOrderID = field.NewString(table, "external_order_id")
	t.ExternalTicketType = field.NewString(table, "external_ticket_type")

	t.fillFieldMap()

	return t
}

func (t *tInvoiceAttach) WithContext(ctx context.Context) *tInvoiceAttachDo {
	return t.tInvoiceAttachDo.WithContext(ctx)
}

func (t tInvoiceAttach) TableName() string { return t.tInvoiceAttachDo.TableName() }

func (t tInvoiceAttach) Alias() string { return t.tInvoiceAttachDo.Alias() }

func (t tInvoiceAttach) Columns(cols ...field.Expr) gen.Columns {
	return t.tInvoiceAttachDo.Columns(cols...)
}

func (t *tInvoiceAttach) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tInvoiceAttach) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["invoice_id"] = t.InvoiceID
	t.fieldMap["order_sn"] = t.OrderSn
	t.fieldMap["attachment_url"] = t.AttachmentURL
	t.fieldMap["ocr_modify"] = t.OcrModify
	t.fieldMap["custom_tax_rate"] = t.CustomTaxRate
	t.fieldMap["cert_status"] = t.CertStatus
	t.fieldMap["pdf_url"] = t.PdfURL
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["external_order_id"] = t.ExternalOrderID
	t.fieldMap["external_ticket_type"] = t.ExternalTicketType
}

func (t tInvoiceAttach) clone(db *gorm.DB) tInvoiceAttach {
	t.tInvoiceAttachDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tInvoiceAttach) replaceDB(db *gorm.DB) tInvoiceAttach {
	t.tInvoiceAttachDo.ReplaceDB(db)
	return t
}

type tInvoiceAttachDo struct{ gen.DO }

func (t tInvoiceAttachDo) Debug() *tInvoiceAttachDo {
	return t.withDO(t.DO.Debug())
}

func (t tInvoiceAttachDo) WithContext(ctx context.Context) *tInvoiceAttachDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tInvoiceAttachDo) ReadDB() *tInvoiceAttachDo {
	return t.Clauses(dbresolver.Read)
}

func (t tInvoiceAttachDo) WriteDB() *tInvoiceAttachDo {
	return t.Clauses(dbresolver.Write)
}

func (t tInvoiceAttachDo) Session(config *gorm.Session) *tInvoiceAttachDo {
	return t.withDO(t.DO.Session(config))
}

func (t tInvoiceAttachDo) Clauses(conds ...clause.Expression) *tInvoiceAttachDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tInvoiceAttachDo) Returning(value interface{}, columns ...string) *tInvoiceAttachDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tInvoiceAttachDo) Not(conds ...gen.Condition) *tInvoiceAttachDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tInvoiceAttachDo) Or(conds ...gen.Condition) *tInvoiceAttachDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tInvoiceAttachDo) Select(conds ...field.Expr) *tInvoiceAttachDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tInvoiceAttachDo) Where(conds ...gen.Condition) *tInvoiceAttachDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tInvoiceAttachDo) Order(conds ...field.Expr) *tInvoiceAttachDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tInvoiceAttachDo) Distinct(cols ...field.Expr) *tInvoiceAttachDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tInvoiceAttachDo) Omit(cols ...field.Expr) *tInvoiceAttachDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tInvoiceAttachDo) Join(table schema.Tabler, on ...field.Expr) *tInvoiceAttachDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tInvoiceAttachDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tInvoiceAttachDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tInvoiceAttachDo) RightJoin(table schema.Tabler, on ...field.Expr) *tInvoiceAttachDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tInvoiceAttachDo) Group(cols ...field.Expr) *tInvoiceAttachDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tInvoiceAttachDo) Having(conds ...gen.Condition) *tInvoiceAttachDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tInvoiceAttachDo) Limit(limit int) *tInvoiceAttachDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tInvoiceAttachDo) Offset(offset int) *tInvoiceAttachDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tInvoiceAttachDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tInvoiceAttachDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tInvoiceAttachDo) Unscoped() *tInvoiceAttachDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tInvoiceAttachDo) Create(values ...*model.TInvoiceAttach) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tInvoiceAttachDo) CreateInBatches(values []*model.TInvoiceAttach, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tInvoiceAttachDo) Save(values ...*model.TInvoiceAttach) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tInvoiceAttachDo) First() (*model.TInvoiceAttach, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvoiceAttach), nil
	}
}

func (t tInvoiceAttachDo) Take() (*model.TInvoiceAttach, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvoiceAttach), nil
	}
}

func (t tInvoiceAttachDo) Last() (*model.TInvoiceAttach, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvoiceAttach), nil
	}
}

func (t tInvoiceAttachDo) Find() ([]*model.TInvoiceAttach, error) {
	result, err := t.DO.Find()
	return result.([]*model.TInvoiceAttach), err
}

func (t tInvoiceAttachDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TInvoiceAttach, err error) {
	buf := make([]*model.TInvoiceAttach, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tInvoiceAttachDo) FindInBatches(result *[]*model.TInvoiceAttach, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tInvoiceAttachDo) Attrs(attrs ...field.AssignExpr) *tInvoiceAttachDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tInvoiceAttachDo) Assign(attrs ...field.AssignExpr) *tInvoiceAttachDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tInvoiceAttachDo) Joins(fields ...field.RelationField) *tInvoiceAttachDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tInvoiceAttachDo) Preload(fields ...field.RelationField) *tInvoiceAttachDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tInvoiceAttachDo) FirstOrInit() (*model.TInvoiceAttach, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvoiceAttach), nil
	}
}

func (t tInvoiceAttachDo) FirstOrCreate() (*model.TInvoiceAttach, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvoiceAttach), nil
	}
}

func (t tInvoiceAttachDo) FindByPage(offset int, limit int) (result []*model.TInvoiceAttach, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tInvoiceAttachDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tInvoiceAttachDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tInvoiceAttachDo) Delete(models ...*model.TInvoiceAttach) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tInvoiceAttachDo) withDO(do gen.Dao) *tInvoiceAttachDo {
	t.DO = *do.(*gen.DO)
	return t
}
